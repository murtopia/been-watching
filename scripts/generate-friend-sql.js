/**
 * Generates SQL INSERT statements from the matched friend data
 * This will create dummy friend profiles and populate their watch data
 */

const matchData = {
  // Paste your JSON data here - this is a placeholder
};

// Manual corrections for fuzzy matching errors
const CORRECTIONS = {
  'Quebec Fire Department on Sleds': {
    tmdb_id: 245703,
    media_type: 'tv',
    title: 'Dept. Q',
    poster_path: '/h60alybJNgGGfPUbGGUXMXOoFvB.jpg'
  },
  'The Three-Body Problem in Minecraft': {
    tmdb_id: 108545,
    media_type: 'tv',
    title: '3 Body Problem',
    poster_path: '/1wtSZdUztUGZ3bonwTSIEGf84n3.jpg'
  },
  'Oppenheimer': {
    tmdb_id: 872585,
    media_type: 'movie',
    title: 'Oppenheimer',
    poster_path: '/8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg'
  },
  'The Gentleman': {
    tmdb_id: 522627,
    media_type: 'movie',
    title: 'The Gentlemen',
    poster_path: '/jtrhTYB7xSrJxR1vusu99nvnZ1g.jpg'
  }
};

function applyCorrections(friendData) {
  for (const friend in friendData) {
    for (const status in friendData[friend].shows) {
      friendData[friend].shows[status] = friendData[friend].shows[status].map(show => {
        const correction = CORRECTIONS[show.title];
        if (correction) {
          return { ...show, ...correction };
        }
        return show;
      });
    }
  }
  return friendData;
}

function generateSQL(data) {
  const correctedData = applyCorrections(data);

  let sql = `-- Generated SQL for Friend Data
-- Run this in Supabase SQL Editor after creating friend accounts

-- First, you need to manually create accounts for:
-- 1. Taylor Murto (taylor.murto@example.com) - Username: Taylor.Murto
-- 2. Todd Williams (todd.williams@example.com) - Username: Toddles
-- 3. Pat Moss (pat.moss@example.com) - Username: Mossy

-- After creating accounts, get their user IDs from auth.users table
-- Then replace the UUIDs below with the actual IDs

-- Temporary UUIDs (REPLACE THESE):
-- Taylor: '00000000-0000-0000-0000-000000000001'
-- Todd:   '00000000-0000-0000-0000-000000000002'
-- Pat:    '00000000-0000-0000-0000-000000000003'

`;

  const friendUUIDs = {
    taylor: '00000000-0000-0000-0000-000000000001',
    todd: '00000000-0000-0000-0000-000000000002',
    pat: '00000000-0000-0000-0000-000000000003'
  };

  // Generate media inserts
  const allMedia = new Map();

  for (const [friendKey, friendData] of Object.entries(correctedData)) {
    for (const status in friendData.shows) {
      for (const show of friendData.shows[status]) {
        const mediaId = `${show.media_type}-${show.tmdb_id}`;
        if (!allMedia.has(mediaId)) {
          allMedia.set(mediaId, show);
        }
      }
    }
  }

  sql += `\n-- Insert Media (shows/movies)\n`;
  sql += `INSERT INTO public.media (id, tmdb_id, media_type, title, poster_path, tmdb_data)
VALUES\n`;

  const mediaValues = Array.from(allMedia.values()).map(show => {
    const mediaId = `${show.media_type}-${show.tmdb_id}`;
    const title = (show.title || '').replace(/'/g, "''");
    const posterPath = show.poster_path || '';

    return `  ('${mediaId}', ${show.tmdb_id}, '${show.media_type}', '${title}', '${posterPath}', '{}')`;
  });

  sql += mediaValues.join(',\n');
  sql += `\nON CONFLICT (id) DO NOTHING;\n`;

  // Generate watch_status and ratings for each friend
  for (const [friendKey, friendData] of Object.entries(correctedData)) {
    const uuid = friendUUIDs[friendKey];
    const displayName = friendData.profile.display_name;

    sql += `\n\n-- ${displayName}'s Watch Status\n`;
    sql += `INSERT INTO public.watch_status (user_id, media_id, status, paused)
VALUES\n`;

    const watchStatusValues = [];

    for (const status in friendData.shows) {
      for (const show of friendData.shows[status]) {
        const mediaId = `${show.media_type}-${show.tmdb_id}`;
        const isPaused = show.paused ? 'true' : 'false';
        watchStatusValues.push(`  ('${uuid}', '${mediaId}', '${show.status}', ${isPaused})`);
      }
    }

    sql += watchStatusValues.join(',\n');
    sql += `\nON CONFLICT (user_id, media_id) DO NOTHING;\n`;

    // Generate ratings for watched shows
    const ratedShows = friendData.shows.watched.filter(show => show.rating);

    if (ratedShows.length > 0) {
      sql += `\n-- ${displayName}'s Ratings\n`;
      sql += `INSERT INTO public.ratings (user_id, media_id, rating)
VALUES\n`;

      const ratingValues = ratedShows.map(show => {
        const mediaId = `${show.media_type}-${show.tmdb_id}`;
        return `  ('${uuid}', '${mediaId}', '${show.rating}')`;
      });

      sql += ratingValues.join(',\n');
      sql += `\nON CONFLICT (user_id, media_id) DO UPDATE SET rating = EXCLUDED.rating;\n`;
    }
  }

  sql += `\n\n-- Success! Friend data has been imported.\n`;
  sql += `-- Note: Activities will be auto-generated by database triggers.\n`;

  return sql;
}

// For Node.js
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { generateSQL };
}

// For browser
if (typeof window !== 'undefined') {
  window.generateFriendSQL = generateSQL;
}

/**
 * BOOZEHOUNDS APPLE NOTES MIGRATION SCRIPT
 *
 * This script imports watch data from the Apple Notes export
 *
 * Usage:
 *   node scripts/migrate-apple-notes.js [--dry-run] [--user username]
 *
 * Options:
 *   --dry-run      Don't actually import, just show what would be imported
 *   --user         Only import for specific user (murtopia, Toddles, Taylor.Murto, Mossy)
 */

const fs = require('fs')
const path = require('path')
const https = require('https')

// Read environment variables
const envPath = path.join(__dirname, '..', '.env.local')
const envContent = fs.readFileSync(envPath, 'utf-8')
const envVars = {}

envContent.split('\n').forEach(line => {
  const match = line.match(/^([^=]+)=(.*)$/)
  if (match) {
    envVars[match[1].trim()] = match[2].trim()
  }
})

const SUPABASE_URL = envVars.NEXT_PUBLIC_SUPABASE_URL
const SUPABASE_SERVICE_KEY = envVars.SUPABASE_SERVICE_ROLE_KEY
const TMDB_API_KEY = envVars.TMDB_API_KEY || '99b89037cac7fea56692934b534ea26a'

// Star rating mapping
const RATING_MAP = {
  '*': 'meh',
  '**': 'like',
  '***': 'love'
}

// Title corrections - map incorrect titles to correct ones
const TITLE_CORRECTIONS = {
  // Confirmed corrections from Nick's review
  'Life of Beth': 'Life & Beth',
  'Smithsonian\'s Spy Wars': 'Spy Wars With Damian Lewis',
  'Woman of the Hour. Netlix': '__SKIP__',  // Ignore this show
  '30 for 30. Lance Armstrong': 'Lance',
  'Sicaro': 'Sicario',
  'Alien Earth : fx/hulu': 'Alien: Earth',
  'Gold & Greed: The Hunt for Fenn\'s Treasure" which is available on Netflix': '__SKIP__',  // Ignore this show
  'King of the Hill reboot': 'King of the Hill',
  'Lawmen Bass Reaves': 'Lawmen: Bass Reeves',
  'The Gentleman - Netflix': 'The Gentlemen',
  'Tokyo Vice   3/20/24': '__SKIP__',  // Duplicate
  'Top Chef Wisconsin': 'Top Chef',
  'Jackpot  also its dumb but funny': 'Jackpot!',
  'Cowboy Bourbon': '__SKIP__',  // Ignore this show
  'Window Cliquot': 'Widow Clicquot',
  'The Fountain of Youth  minus': 'The Fountain of Youth',
  'The Ultimatum': '__SKIP__',  // Ignore this show

  // Fixed matches for "needs review" items
  'End of Watch': 'End of Watch',  // Movie, not TV show
  'Will and Harper': 'Will & Harper',
  'Terminal List': 'The Terminal List',
  'The Brother\'s Sun': 'The Brothers Sun',
  'Rebel Moon': 'Rebel Moon: Part One - A Child of Fire',
  'Roadhouse': 'Road House',
  'Carry On': 'Carry-On',

  // Specific movie/show versions
  'Argyle': 'Argylle',  // Correct spelling
  'Solo': 'Solo: A Star Wars Story',
  'Fall Guy': 'The Fall Guy',
  'Homicide': 'Homicide: Life on the Street'
}

// Year-specific corrections for movies/shows
const YEAR_FILTERS = {
  'The Fountain of Youth': 2025,
  'Number 24': 2024,
  'Paradise': 2025,
  'Lift': 2024,
  'The Fall Guy': 2024,
  'Argylle': 2024,
  'Napoleon': 2023,
  'Ferrari': 2023,
  'Road House': 2024,
  'Wolfs': 2024,
  'Carry-On': 2024,
  'Havoc': 2025,
  'Jackpot!': 2024,
  'End of Watch': 2012,
  'Sicario': 2015,
  'Will & Harper': 2024,
  'Acapulco': 2021  // Apple TV+ comedy, not 1961 show
}

// Titles that MUST be searched as movies (not TV)
const FORCE_MOVIE = [
  'End of Watch',
  'Road House',
  'Wolfs',
  'Carry-On',
  'Havoc',
  'Jackpot!',
  'Sicario',
  'Will & Harper',
  'The Fountain of Youth',
  'Number 24',
  'Lift',
  'The Fall Guy',
  'Argylle',
  'Napoleon',
  'Ferrari',
  'Solo: A Star Wars Story'
]

// Read the full Apple Notes data file
const DATA_FILE_PATH = path.join(__dirname, '..', 'bw been watching migration data.txt')

// Parse all users from the data file
function parseAllUsersData() {
  const fullData = fs.readFileSync(DATA_FILE_PATH, 'utf-8')
  const lines = fullData.split('\n')

  const users = {
    'murtopia': { name: 'Nick', data: [] },
    'Taylor.Murto': { name: 'Taylor', data: [] },
    'Mossy': { name: 'Pat', data: [] },
    'Toddles': { name: 'Todd', data: [] }
  }

  let currentUser = null

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i]

    // Detect user section headers
    if (line.includes('NICK MURTO:')) {
      currentUser = 'murtopia'
      continue
    } else if (line.includes('Taylor Murto')) {
      currentUser = 'Taylor.Murto'
      continue
    } else if (line.includes('Pat Moss')) {
      currentUser = 'Mossy'
      continue
    } else if (line.includes('Todd Williams')) {
      currentUser = 'Toddles'
      continue
    }

    // Add lines to current user's data
    if (currentUser && line.trim()) {
      users[currentUser].data.push(line)
    }
  }

  // Convert arrays back to strings
  Object.keys(users).forEach(username => {
    users[username].dataText = users[username].data.join('\n')
  })

  return users
}

// Parse a line to extract show name, rating, and metadata
Loudermilk
Life of Beth
End of Watch
Last of Us
Welcome to Wrexham
Smithsonian's Spy Wars (Paramount+)
Homicide (Peacock)
Ferrari (Hulu)
Prey (Hulu)
Oxford Blues
Fleabag
Dark (Netflix)
Sour Grapes
Woman of the Hour. Netlix.
Field to Fire
Moonstruck.
Will and Harper (Netflix)
Alone (History?)
30 for 30. Lance Armstrong.
Camp Revamp.
Lion (movie)
Workaholics
Mickey 17
Gangs of London
Hacks. (HBO)
Sicaro.
Justified.
Alien Earth : fx/hulu
Gold & Greed: The Hunt for Fenn's Treasure" which is available on Netflix.
The Ultimatum (Netflix)
King of the Hill reboot (Hulu)

Nick Currently Been Watching
The Penguin (Max)
Shrinking S2 (Apple)
1923 s1 (Paramount)
Law and Order: organized crime s1
Silo (Apple)
Pee-Wee as Himself (Max)
The Better Sister (Prime)
Terminal List s2 (Prime)
Acapulco s4 (Apple)
Peacemaker S2 (HBO)
Tulsa King s3 (Paramount)
Black Rabbit (Netflix)
Slow Horses s5 (apple)

Nick Done Watching
Jack Reacher s2 (Prime)**
Monarch (Apple)***
Slow Horses s3 (Apple)***
Fargo s5 ***
The Brother's Sun (Netflix) ***
Rebel Moon (Netflix)**
Mr. & Mrs. Smith (Prime) **
Lawmen Bass Reaves (Paramount+)***
Lioness (Paramount+)***
Rabbit Hole (Paramount+)***
Napoleon (Apple)*
The Gentleman - Netflix***
Roadhouse (Prime)*** 3//28/24
Tokyo Vice S1 (Max)*** 3/20/24
Tokyo Vice S2 (Max)***
Argyle (Apple)*
Ricky Stanicky (Prime)*
Rebel Moon: Part 2 (Netflix)***
The Diplomat s1 (Netflix?)***
Dune Part Two (Apple)**
Solo (Disney+)**
Tournament of Champions S5 (Max)**
Asteroid City (movie, Prime)***
Fool Me Once (Netflix)***
3 Body Problem (Netflix)***
The Infiltrator (Movie 2016)***
Fallout (Amazon)***
The Ministry of Ungentlemanly Warfare (movie) ***
Fall Guy (movie)***
Drops of God (apple + a while back)***
Sugar (AppleTV)***
Killing Eve S1 (Netflix)***
Killing Eve S2 (Netflix)**
Top Chef Wisconsin (Peacock)**
Acapulco S3 (Apple+)***
Dark Matter (Apple+)***
Killing Eve S3 (Netflix)***
Land of Bad (Netflix)**
Killing Eve S4 (Netflix)***
Lift (Netflix)*
Curb Your Enthusiasm s12 (Max)**
The Boys s4 (Prime)***
The Beekeeper (Prime)**
The Instigators (Apple)**
Presumed Innocent (Apple)***
Jackpot (Prime)*** also its dumb but funny
Furiosa: A Mad Max Saga (Max)***
Treason (Netflix)***
Rebel Ridge (Netflix)***
The American Society of Magical Negros (movie)**
The Perfect Couple *** (Netflix)***
Nobody Wants This (Netflix)***
Wolfs (Apple)**
Slow Horses S4 (Apple)***
Bad Monkey (Apple)***
The Old Man S1 (Hulu)***
Tulsa King S2 (Paramount+)***
The Lincoln Lawyer S2 (Netflix)***
The Diplomat (Netflix)***
Deadpool & Wolverine (Disney)**
Disclaimer (Apple) ***
The Old Man S2 (Hulu)***
Cowboy Bourbon (Prime)**
The Crow (new movie)**
The Diplomat s3 (Netflix?)***
Carry On (Netflix)**
Lioness S2 (Paramount+)***
Landman  (Paramount+)***
Day of the Jackal (Peacock)***
Black Doves (Netflix)***
Dazed and Confused (movie)**
Window Cliquot (Netflix)**
Emilia Perez (Netflix)*
Beast Games (Prime)***
Zero Day (Netflix)***
Paradise (hulu)***
The Agency (Paramount+)***
The Recruit s2 (Netflix)***
Goliath (eff. Prime)***
White Lotus s3 (max)***
Reacher s3 (Prime)**
Number 24 Movie (Netflix)***
Righteous Gemstones s4 (Max)***
The Recruit s2 (Netflix)***
The Fountain of Youth (Apple) minus*
MobLand (Paramount)***
FUBAR! (Netflix)***
Sirens (Netflix)**
Heads of State (Movie: Prime)***
Shark Whisperer (Netflix)**
Hidden Strike (Netflix)*
The Studio (Apple)**
Happy Gilmore (Netflix)**
Hostage (Netflix)**
F1 (Movie)
Havoc (Netflix)***
The Night Agent s2 (Netflix)**

Taylor Need to watch
The Old Man (Hulu)
The Order (Hulu)
Silo (Apple)
Black Rabbit (Netflix)
Slow Horses S5 (Apple)

Taylor Currently Been Watching
Acapulco S4 (Apple)
Platonic S2 (Apple)
Peacemaker S2 (HBO)
Dept Q (Netflix)
The Terminal List: Dark Wolf(Prime)
The Morning Show S4 (Apple)

Taylor Done Watching
Black Bag (Movie)***
F1 The Movie (Apple)**
Ballard (Prime)**
Smoke (Apple)***
War of The Worlds (Prime)*, awful
Stick (Apple)**
Happy Gilmore 2 (Netflix)**
Superman***
Sinners (Max)**
Riff Raff (Hulu)**
The Bear S4 (Hulu)**
Heads of State (Prime)**
The Waterfront (Netflix)**
Fubar S2 (Netflix)**
The Better Sister (Prime)**
Top Chef S22 (Peacock)**
Interior Chinatown (Hulu)**
Sirens (Netflix)**
MobLand (Paramount)***
Your Friends and Neighbors (Apple)***
The Studio (Apple)***
Fountain of Youth (Apple)*
Andor S2 (Disney)***
Mission: Impossible – The Final Reckoning***
Zero Day (Netflix)***
1923 S2 (Paramount)**
White Lotus S3 (Max)***
Drive to Survive S7 (Netflix)***
Reacher S3 (Prime)**
Anora (Hulu)**
Prime Target (Apple)**
Beast Games (Prime)***
Paradise (Hulu)***
The Gorge (Apple)***
The Recruit S2 (Netflix)***
The Night Agent S2 (Netflix)**
You're Cordially Invited (Prime)**
The Agency (Paramount)***
The Diplomat S2 (Netflix)***
Landman (Paramount)***
Shrinking S2 (Apple)***
Carry On (Netflix)**
Black Doves (Netflix)***
Day of the Jackal (Peacock)***
Yellowstone S5 P2 (Paramount)***
Senna (Netflix)**
Lioness S2 (Paramount)***
Deadpool & Wolverine (Disney)**
Twisters (Peacock)**
The Penguin (Max)**
Disclaimer (Apple)***
Lincoln Lawyer S3 (Netflix)**
Wolfs (Apple)**
Bad Monkey (Apple)***
Slow Horses S4 (Apple)***
Nobody Wants This (Netflix)***
Rings of Power S2 (Prime)**
Industry S3 (Max)***
Grand Tour: One For The Road** (Prime)
Bad Boys: Ride or Die** (Netflix)
Challengers** (Movie)
The Perfect Couple*** (Netflix)
Unfrosted (Netflix)**
Furiosa: A Mad Max Saga (Max)***
Jackpot (Prime)***
The Bikeriders (Movie, Peacock)**
The Instigators (Apple)*
Presumed Innocent (Apple)***
House of the Dragon S2 (Max)**
Land of Bad (Netflix)**
Killing Eve S4 (Netflix)***
The Bear S3 (Hulu)**
The Iron Claw (Max)**
The Boys S4 (Prime)**
Dark Matter (Apple)***
Killing Eve S3 (Netflix)***
Acapulco S3 (Apple)**
Killing Eve S2 (Netflix)**
Killing Eve S1 (Netflix)***
Top Chef Wisconsin (Peacock)**
Hit Man (Netflix)**
Fargo S5 (Hulu)***
Fall Guy (Movie)***
Godzilla Minus One (Netflix)***
The Ministry of Ungentlemanly Warfare***
Tokyo Vice (Max)***
Sugar (Apple)**
Fallout (Prime)**
Rebel Moon: Part 2 (Netflix)**
Dune 2 (Apple)***
The Gentlemen (Netflix)***
Lawmen Bass Reaves (Paramount+)***
Godzilla + Kong (Theaters)**
Aquaman 2 (Max)*
Drive to Survive S6 (Netflix)**
Anyone But You (Movie)*
Ricky Stanicky (Prime)**
Slow Horses S3 (Apple)***
Grand Tour Sand Job (Prime)**
Jack Reacher S2 (Prime)**
Mr. & Mrs. Smith (Prime)***
The Brothers Sun (Netflix)***
Monarch (Apple)***

Pat Need to watch
Road House (Prime)
Star Trek Discovery ()
Three Body Problem (Netflix)

Pat Currently Been Watching
Fallout 4/11 (Amazon) **
Mr. & Mrs. Smith (Prime) **
Halo () **
For all mandkind () **
The Gentleman (Netflix) ***

Pat Done Watching
Argyle (Apple) **
Invincible (Prime) ***
Jack Reacher s2 (Prime)***
GenV (Prime) ***
TheBoys (Prime) ***
Dune (HBO) ***
PeaceMaker (HBO) ***
Wonka () *
Ferrari () *
Saltburn () ***
Creator () **
Oppenheimer () ***
Lioness (Paramount+)***
Dune 2 () ***

Todd Need to watch
Bear - Hulu
The Madness -
Ballard, prime

Todd Currently Been Watching
Task, HBO
Peacemaker S2

Todd Done Watching
Rebel Moon 2 - Netflix *
Finch - Apple *
Masters of the Air - ***
Dune 2 - ***
The Ministry of Ungentlemanly Warfare - rent it ***
AK-47 Kalashnikov - Prime - **
Sugar - Apple ***
Guilded Age - HBO ***
True Detective - HBO **
Slow Horses - Apple ***
Fargo seasons 4 and 5 Hulu ***
Reacher - Prime ***
Killing Eve - Netflix ***
Bad Sisters - Apple **
Slow Horses season 2 - Apple ***
Bad Monkey - Apple ***
Lord of the Rings, rings of power s. 2***
Loot seasons 1&2 Apple ****
The Old Man Hulu ***
Bad Monkey - Apple ***
Rebel Ridge - Netflix ***
Lioness, Paramount ***
Alex Cross, Prime ***
Carry On, Netflix *
Shrinking S2, Apple, ***
The Six Triple Eight, Netflix, **
The diplomat, Netflix, ***
Yellowstone Season 5 -2, **
Will and Harper, Netflix ***
Landman, Paramount ***
Fly me to the Moon, Apple ***
Lioness season 2, Paramount, ***
Dune series, HBO, **
The Last of us - HBO **
The Recruit season 2 - Netflix ***
The Night Agent - Netflix ***
The Starling movie - Netflix **
Silo season 2 , Apple, ***
Unfrosted, Netflix ***
Number 24, Netflix, ***
Fountain of Youth, Apple, **
The Accountant 2, prime***
Foundation of youth, Apple **
1923 season 2, Paramount, ***
White Lotus season 3, HBO **
Mobland, Paramount ***
Your Friends and Neighbors, Apple **
Agency: Central Intelligence, Paramount  **
Deep Cover, Prime ***
Fubar S2, Netflix ***
Heads of State, Prime **
Happy Gilmore 2, Netflix **
Department Q, Netflix ***
Son of a Critch, Netflix ***
Terminal List, Dark Wolf, Netflix ***
Resident Alien S4, ***
Star Trek S4 paramount +, **
Acapulco S4, Apple, **
`;

// Parse a line to extract show name, rating, and metadata
function parseLine(line) {
  line = line.trim()
  if (!line) return null

  // Extract rating
  let rating = null
  const ratingMatch = line.match(/(\*+)/)
  if (ratingMatch) {
    rating = RATING_MAP[ratingMatch[1]] || null
  }

  // Remove rating from line
  let cleanLine = line.replace(/\*+/g, '').trim()

  // Extract season info if present
  const seasonMatch = cleanLine.match(/\bs(\d+)\b/i) || cleanLine.match(/season\s*(\d+)/i)
  const seasonNumber = seasonMatch ? parseInt(seasonMatch[1]) : null

  // Remove season indicators
  cleanLine = cleanLine.replace(/\bs\d+\b/gi, '').replace(/season\s*\d+/gi, '').trim()

  // Extract network/platform in parentheses
  const networkMatch = cleanLine.match(/\(([^)]+)\)/)
  const network = networkMatch ? networkMatch[1] : null

  // Remove network from line
  cleanLine = cleanLine.replace(/\([^)]+\)/g, '').trim()

  // Remove trailing punctuation and extra info
  cleanLine = cleanLine.replace(/\d{1,2}\/\/\d{1,2}\/\d{2,4}/g, '').trim() // Remove dates

  // Remove platform names that come after commas or dashes
  // Common platforms: Netflix, Prime, Apple, Hulu, Max, HBO, Paramount, Peacock, Disney, etc.
  cleanLine = cleanLine.replace(/[,\-]\s*(Netflix|Prime|Apple|Hulu|Max|HBO|Paramount|Peacock|Disney|FX|Amazon|paramount\s*\+)\s*$/gi, '').trim()

  // Remove trailing commas, dashes, and periods
  cleanLine = cleanLine.replace(/[,.-]\s*$/g, '').trim()

  // Detect if it's a movie
  let isMovie = /\b(movie|film)\b/i.test(cleanLine) || /\b(movie|film)\b/i.test(line)
  cleanLine = cleanLine.replace(/\b(movie|film)\b/gi, '').trim()

  // Apply title corrections if available
  const correctedTitle = TITLE_CORRECTIONS[cleanLine] || cleanLine

  // Skip shows marked for skipping
  if (correctedTitle === '__SKIP__') {
    return null
  }

  // Override isMovie if title is in FORCE_MOVIE list
  if (FORCE_MOVIE.includes(correctedTitle)) {
    isMovie = true
  }

  return {
    title: correctedTitle,
    rating,
    seasonNumber,
    network,
    isMovie,
    originalLine: line,
    wasCorrected: correctedTitle !== cleanLine
  }
}

// Parse all data for a user
function parseUserData(username, dataText) {
  const lines = dataText.trim().split('\n')
  const shows = {
    want: [],
    watching: [],
    watched: []
  }

  let currentStatus = null

  for (const line of lines) {
    const trimmed = line.trim()

    // Detect section headers
    if (trimmed.includes('Need to watch') || trimmed.includes('Needs to watch')) {
      currentStatus = 'want'
      continue
    }
    if (trimmed.includes('Currently Been Watching')) {
      currentStatus = 'watching'
      continue
    }
    if (trimmed.includes('Done Watching')) {
      currentStatus = 'watched'
      continue
    }

    // Skip headers and empty lines
    if (!trimmed || trimmed.includes('——————') || trimmed.match(/^[A-Z\s]+:$/)) {
      continue
    }

    if (currentStatus) {
      const parsed = parseLine(trimmed)
      if (parsed && parsed.title) {
        shows[currentStatus].push(parsed)
      }
    }
  }

  return shows
}

// Helper to make TMDB API requests
function tmdbRequest(url) {
  return new Promise((resolve, reject) => {
    https.get(url, (res) => {
      let data = ''
      res.on('data', chunk => data += chunk)
      res.on('end', () => {
        try {
          resolve(JSON.parse(data))
        } catch (e) {
          reject(e)
        }
      })
    }).on('error', reject)
  })
}

// Search TMDB for a show/movie
async function searchTMDB(title, isMovie = null, seasonNumber = null, yearFilter = null) {
  const encodedTitle = encodeURIComponent(title)
  const lowerTitle = title.toLowerCase()

  // Try TV search first (unless explicitly a movie)
  if (isMovie !== true) {
    const tvUrl = `https://api.themoviedb.org/3/search/tv?api_key=${TMDB_API_KEY}&query=${encodedTitle}`
    const tvResults = await tmdbRequest(tvUrl)

    if (tvResults.results && tvResults.results.length > 0) {
      // Find best match by comparing names and year
      let bestMatch = tvResults.results.find(r => r.name.toLowerCase() === lowerTitle)

      // If we have a year filter, try to find a match with that year
      if (yearFilter && !bestMatch) {
        bestMatch = tvResults.results.find(r => {
          const year = r.first_air_date ? parseInt(r.first_air_date.substring(0, 4)) : null
          return year === yearFilter
        })
      }

      // Fallback to first result
      if (!bestMatch) {
        bestMatch = tvResults.results[0]
      }

      return {
        ...bestMatch,
        media_type: 'tv',
        season_number: seasonNumber,  // Pass along season number if provided
        confidence: bestMatch.name.toLowerCase() === lowerTitle ? 'high' : 'medium'
      }
    }
  }

  // Try movie search
  const movieUrl = `https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&query=${encodedTitle}`
  const movieResults = await tmdbRequest(movieUrl)

  if (movieResults.results && movieResults.results.length > 0) {
    // Find best match by comparing titles and year
    let bestMatch = movieResults.results.find(r => r.title.toLowerCase() === lowerTitle)

    // If we have a year filter, try to find a match with that year
    if (yearFilter && !bestMatch) {
      bestMatch = movieResults.results.find(r => {
        const year = r.release_date ? parseInt(r.release_date.substring(0, 4)) : null
        return year === yearFilter
      })
    }

    // Fallback to first result
    if (!bestMatch) {
      bestMatch = movieResults.results[0]
    }

    return {
      ...bestMatch,
      media_type: 'movie',
      confidence: bestMatch.title.toLowerCase() === lowerTitle ? 'high' : 'medium'
    }
  }

  return null
}

// Match a parsed show to TMDB
async function matchShow(parsed) {
  try {
    // Check if we have a year filter for this title
    const yearFilter = YEAR_FILTERS[parsed.title] || null

    const result = await searchTMDB(parsed.title, parsed.isMovie, parsed.seasonNumber, yearFilter)

    if (!result) {
      return {
        ...parsed,
        tmdb_match: null,
        match_confidence: 'failed',
        needs_review: true
      }
    }

    return {
      ...parsed,
      tmdb_match: result,
      match_confidence: result.confidence,
      needs_review: result.confidence !== 'high'
    }
  } catch (error) {
    console.error(`Error matching "${parsed.title}":`, error.message)
    return {
      ...parsed,
      tmdb_match: null,
      match_confidence: 'error',
      needs_review: true
    }
  }
}

// Supabase helper
async function supabaseRequest(endpoint, method = 'GET', body = null, upsert = false) {
  const url = `${SUPABASE_URL}/rest/v1/${endpoint}`

  return new Promise((resolve, reject) => {
    const headers = {
      'apikey': SUPABASE_SERVICE_KEY,
      'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
      'Content-Type': 'application/json',
      'Prefer': 'return=representation'
    }

    // Add upsert header if needed
    if (upsert) {
      headers['Prefer'] = 'return=representation,resolution=merge-duplicates'
    }

    const options = {
      method,
      headers
    }

    const urlObj = new URL(url)
    options.hostname = urlObj.hostname
    options.path = urlObj.pathname + urlObj.search

    const req = https.request(options, (res) => {
      let data = ''
      res.on('data', chunk => data += chunk)
      res.on('end', () => {
        try {
          resolve(data ? JSON.parse(data) : null)
        } catch (e) {
          resolve(data)
        }
      })
    })

    req.on('error', reject)

    if (body) {
      req.write(JSON.stringify(body))
    }

    req.end()
  })
}

// Get user ID by username
async function getUserId(username) {
  const profile = await supabaseRequest(`profiles?username=eq.${username}&select=id`)
  return profile && profile[0] ? profile[0].id : null
}

// Import a show for a user
async function importShow(userId, show, watchStatus) {
  const tmdb = show.tmdb_match
  if (!tmdb) {
    console.log(`  ⚠️  Skipping "${show.title}" - no TMDB match`)
    return { success: false, reason: 'no_match' }
  }

  const mediaType = tmdb.media_type
  const tmdbId = tmdb.id
  let seasonNumber = show.seasonNumber || tmdb.season_number

  // For TV shows in "want" status with no season specified, default to Season 1
  if (mediaType === 'tv' && watchStatus === 'want' && !seasonNumber) {
    seasonNumber = 1
  }

  // Build media ID and title based on whether it's season-specific
  let mediaId, title

  if (mediaType === 'tv' && seasonNumber) {
    // Season-specific entry
    mediaId = `tv-${tmdbId}-s${seasonNumber}`
    title = `${tmdb.name} - Season ${seasonNumber}`
  } else {
    // General entry (for movies or TV shows without season info)
    mediaId = `${mediaType}-${tmdbId}`
    title = tmdb.name || tmdb.title
  }

  // Check if user already has this show
  const existing = await supabaseRequest(
    `watch_status?user_id=eq.${userId}&media_id=eq.${mediaId}&select=media_id`
  )

  if (existing && existing.length > 0) {
    console.log(`  ⏭️  Skipping "${title}" - already exists`)
    return { success: false, reason: 'duplicate' }
  }

  try {
    // Step 1: Upsert into media table (may already exist from other users)
    const mediaData = {
      id: mediaId,
      tmdb_id: tmdbId,
      media_type: mediaType,
      title: title,
      poster_path: tmdb.poster_path,
      backdrop_path: tmdb.backdrop_path,
      overview: tmdb.overview,
      release_date: tmdb.first_air_date || tmdb.release_date,
      vote_average: tmdb.vote_average,
      tmdb_data: tmdb
    }

    // Use upsert for media since it might already exist
    await supabaseRequest('media', 'POST', mediaData, true)

    // Step 2: Insert watch status
    const statusData = {
      user_id: userId,
      media_id: mediaId,
      status: watchStatus
    }

    await supabaseRequest('watch_status', 'POST', statusData)

    // Step 3: Insert rating if provided
    if (show.rating) {
      const ratingData = {
        user_id: userId,
        media_id: mediaId,
        rating: show.rating
      }

      await supabaseRequest('ratings', 'POST', ratingData)
    }

    console.log(`  ✅ Imported "${title}"${show.rating ? ` [${show.rating}]` : ''} [${watchStatus}]`)
    return { success: true }
  } catch (error) {
    console.log(`  ❌ Failed to import "${title}" - Exception: ${error.message}`)
    return { success: false, reason: 'exception', error }
  }
}

// Main function
async function main() {
  const args = process.argv.slice(2)
  const isDryRun = args.includes('--dry-run')
  const userFilter = args.find(arg => arg.startsWith('--user='))?.split('=')[1]

  console.log('═══════════════════════════════════════════')
  console.log('  🍺 BOOZEHOUNDS DATA MIGRATION 🍺')
  console.log('═══════════════════════════════════════════\n')

  if (isDryRun) {
    console.log('🔍 DRY RUN MODE - No data will be imported\n')
  }

  // Step 1: Parse all data
  console.log('📖 Step 1: Parsing Apple Notes data...\n')

  const nickData = parseUserData('murtopia', APPLE_NOTES_DATA)

  console.log('📊 PARSED DATA SUMMARY:')
  console.log(`  Nick (murtopia):`)
  console.log(`    Want to watch: ${nickData.want.length} shows`)
  console.log(`    Currently watching: ${nickData.watching.length} shows`)
  console.log(`    Done watching: ${nickData.watched.length} shows`)
  console.log(`    TOTAL: ${nickData.want.length + nickData.watching.length + nickData.watched.length} shows\n`)

  // Step 2: Match with TMDB
  console.log('🔍 Step 2: Matching shows with TMDB API...\n')

  const allShows = [
    ...nickData.want.map(s => ({ ...s, status: 'want' })),
    ...nickData.watching.map(s => ({ ...s, status: 'watching' })),
    ...nickData.watched.map(s => ({ ...s, status: 'watched' }))
  ]

  console.log(`Matching ${allShows.length} shows (this may take a minute)...\n`)

  const matched = []
  const needsReview = []
  const failed = []

  for (let i = 0; i < allShows.length; i++) {
    const show = allShows[i]
    process.stdout.write(`  [${i + 1}/${allShows.length}] Matching "${show.title}"...`)

    const result = await matchShow(show)

    if (result.match_confidence === 'failed' || result.match_confidence === 'error') {
      failed.push(result)
      console.log(` ❌ FAILED`)
    } else if (result.needs_review) {
      needsReview.push(result)
      const matchedTitle = result.tmdb_match.name || result.tmdb_match.title
      console.log(` ⚠️  REVIEW (matched to "${matchedTitle}")`)
    } else {
      matched.push(result)
      const matchedTitle = result.tmdb_match.name || result.tmdb_match.title
      console.log(` ✅ OK`)
    }

    // Rate limit: 40 requests per 10 seconds
    if ((i + 1) % 40 === 0 && i + 1 < allShows.length) {
      console.log('\n  ⏸️  Rate limit pause (10 seconds)...\n')
      await new Promise(resolve => setTimeout(resolve, 10000))
    } else {
      // Small delay between requests
      await new Promise(resolve => setTimeout(resolve, 250))
    }
  }

  console.log('\n📊 MATCHING RESULTS:')
  console.log(`  ✅ High confidence matches: ${matched.length}`)
  console.log(`  ⚠️  Needs review: ${needsReview.length}`)
  console.log(`  ❌ Failed to match: ${failed.length}\n`)

  // Show failed matches
  if (failed.length > 0) {
    console.log('❌ FAILED MATCHES (needs manual fixing):')
    failed.forEach(show => {
      console.log(`  - "${show.title}" (original: "${show.originalLine}")`)
    })
    console.log()
  }

  // Show needs review
  if (needsReview.length > 0) {
    console.log('⚠️  NEEDS REVIEW (check these matches):')
    needsReview.forEach(show => {
      const matchedTitle = show.tmdb_match.name || show.tmdb_match.title
      console.log(`  - "${show.title}" → matched to "${matchedTitle}" [${show.tmdb_match.media_type}]`)
    })
    console.log()
  }

  // Step 3: Import to database (if not dry run)
  if (!isDryRun) {
    console.log('💾 Step 3: Importing to database...\n')

    // Get Nick's user ID
    const userId = await getUserId('murtopia')
    if (!userId) {
      console.error('❌ Could not find user "murtopia" in database!')
      console.log('\nMake sure Nick is logged in first.\n')
      return
    }

    console.log(`Found user: murtopia (${userId})\n`)

    const allMatched = [...matched, ...needsReview]
    let imported = 0
    let skipped = 0
    let failedImport = 0

    for (const show of allMatched) {
      const result = await importShow(userId, show, show.status)

      if (result.success) {
        imported++
      } else if (result.reason === 'duplicate') {
        skipped++
      } else {
        failedImport++
      }

      // Small delay between imports
      await new Promise(resolve => setTimeout(resolve, 100))
    }

    console.log('\n📊 IMPORT RESULTS:')
    console.log(`  ✅ Imported: ${imported}`)
    console.log(`  ⏭️  Skipped (duplicates): ${skipped}`)
    console.log(`  ❌ Failed: ${failedImport}\n`)
  } else {
    console.log('🔍 DRY RUN - Skipping database import\n')
  }

  console.log('═══════════════════════════════════════════')
  console.log('  ✅ MIGRATION COMPLETE!')
  console.log('═══════════════════════════════════════════\n')

  if (isDryRun) {
    console.log('To actually import the data, run without --dry-run flag\n')
  }
}

main().catch(console.error)

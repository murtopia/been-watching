/**
 * Username Validation Utility
 *
 * Ensures usernames meet quality standards:
 * - No timestamps (numeric suffixes)
 * - No auto-generated patterns
 * - No reserved route names
 * - Unique and memorable
 */

/**
 * Reserved usernames that conflict with app routes
 * These cannot be claimed by users
 */
export const RESERVED_USERNAMES = [
  // Main routes
  'feed',
  'profile',
  'myshows',
  'auth',
  'join',
  'user',

  // Admin & system
  'api',
  'admin',
  'settings',
  'dashboard',
  'system',
  'root',
  'support',

  // Legal & info pages
  'welcome',
  'privacy',
  'terms',
  'contact',
  'about',
  'help',
  'guidelines',
  'community-guidelines',
  'community',

  // Auth related
  'login',
  'signup',
  'logout',
  'signin',
  'signout',
  'register',

  // Common conflicts
  'home',
  'index',
  'search',
  'explore',
  'trending',
  'discover',

  // Reserved for future features
  'messages',
  'notifications',
  'activity',
  'friends',
  'followers',
  'following',
  'watchlist',
  'lists',

  // Prevent impersonation
  'beenwatching',
  'staff',
  'official',
  'team',
  'moderator',
  'mod'
]

/**
 * Check if username is reserved (conflicts with routes)
 */
export function isReservedUsername(username: string): boolean {
  return RESERVED_USERNAMES.includes(username.toLowerCase())
}

/**
 * Check if a username appears to be auto-generated (needs customization)
 */
export function isAutoGeneratedUsername(username: string): boolean {
  if (!username) return true

  // Check for timestamp pattern (username_1234567890123)
  const hasTimestamp = /_\d{10,}$/.test(username)
  if (hasTimestamp) return true

  // Check if it's just numbers
  if (/^\d+$/.test(username)) return true

  // Check if it's suspiciously short (likely auto-generated)
  if (username.length < 3) return true

  // Passed all checks - appears to be a real username
  return false
}

/**
 * Check if username is valid format
 */
export function isValidUsername(username: string): boolean {
  if (!username) return false

  // Must be 3-20 characters
  if (username.length < 3 || username.length > 20) return false

  // Only lowercase letters, numbers, and underscores
  if (!/^[a-z0-9_]+$/.test(username)) return false

  // Cannot be reserved
  if (isReservedUsername(username)) return false

  // Cannot be auto-generated
  if (isAutoGeneratedUsername(username)) return false

  return true
}

/**
 * Suggest a username based on display name or email
 */
export function suggestUsername(displayName?: string, email?: string): string {
  let base = ''

  if (displayName) {
    // Remove special characters and spaces, take first word
    base = displayName
      .toLowerCase()
      .replace(/[^a-z0-9\s]/g, '')
      .split(' ')[0]
  } else if (email) {
    // Use email prefix
    base = email.split('@')[0].toLowerCase().replace(/[^a-z0-9]/g, '')
  } else {
    base = 'user'
  }

  // Ensure it's at least 3 characters
  if (base.length < 3) {
    base = base.padEnd(3, 'x')
  }

  // Truncate if too long
  if (base.length > 20) {
    base = base.substring(0, 20)
  }

  return base
}

/**
 * Clean up a username (remove invalid characters)
 */
export function cleanUsername(input: string): string {
  return input
    .toLowerCase()
    .replace(/[^a-z0-9_]/g, '')
    .substring(0, 20)
}
